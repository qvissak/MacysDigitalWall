"use strict";
var constants;
(function (constants) {
    constants.minusOne = -1;
    constants.zero = 0;
    constants.one = 1;
})(constants || (constants = {}));
var EventListenerService = (function () {
    function EventListenerService() {
    }
    EventListenerService.findIndexOf = function (wanted) {
        var registered = EventListenerService.registered;
        for (var index = constants.zero; index < registered.length; ++index) {
            if ((wanted.eventName === registered[index].eventName) && (wanted.listener === registered[index].listener)) {
                return index;
            }
        }
        return constants.minusOne;
    };
    EventListenerService.useWithoutImplementation = function () {
        EventListenerService.implementation = null;
    };
    EventListenerService.setImplementation = function (implementation) {
        var previus = EventListenerService.implementation, registered = EventListenerService.registered;
        var listener;
        if (previus && ((previus.addListener !== implementation.addListener) || (previus.removeListener !== implementation.removeListener))) {
            while (registered.length) {
                listener = registered[registered.length - constants.one];
                previus.removeListener(listener.eventName, listener.listener);
                registered.pop();
            }
        }
        EventListenerService.implementation = implementation;
    };
    EventListenerService.addListener = function (eventName, listener) {
        var additional = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additional[_i - 2] = arguments[_i];
        }
        var implementation = EventListenerService.implementation, findIndexOf = EventListenerService.findIndexOf;
        var register = { eventName: eventName, listener: listener };
        if (findIndexOf(register) === constants.minusOne) {
            EventListenerService.registered.push(register);
            if (implementation !== null)
                implementation.addListener.apply(implementation, [eventName, listener].concat(additional));
        }
    };
    EventListenerService.emit = function (eventName, emitted) {
        for (var _i = 0, _a = EventListenerService.registered; _i < _a.length; _i++) {
            var listener = _a[_i];
            if (listener.eventName === eventName) {
                emitted ? listener.listener(emitted) : listener.listener();
            }
        }
    };
    EventListenerService.removeListener = function (eventName, listener) {
        var additional = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            additional[_i - 2] = arguments[_i];
        }
        var implementation = EventListenerService.implementation;
        var index = EventListenerService.findIndexOf({ eventName: eventName, listener: listener });
        if (index !== constants.minusOne) {
            EventListenerService.registered.splice(index, constants.one);
            if (implementation !== null)
                implementation.removeListener.apply(implementation, [eventName, listener].concat(additional));
        }
    };
    EventListenerService.registered = [];
    return EventListenerService;
}());
exports.EventListenerService = EventListenerService;
;
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = EventListenerService;
