export interface EventListenerImplementation {
    addListener: (eventName: string, listener: (event?: any) => void, ...additional: any[]) => void;
    removeListener: (eventName: string, listener: (event?: any) => void, ...additional: any[]) => void;
}
export interface EventListenerRegisterdListener {
    eventName: string;
    listener: (event?: any) => void;
}
export declare class EventListenerService {
    private static implementation;
    private static registered;
    private static findIndexOf(wanted);
    static useWithoutImplementation(): void;
    static setImplementation(implementation: EventListenerImplementation): void;
    static addListener(eventName: string, listener: (event?: any) => void, ...additional: any[]): void;
    static emit(eventName: string, emitted?: any): void;
    static removeListener(eventName: string, listener: (event?: any) => void, ...additional: any[]): void;
}
export default EventListenerService;
